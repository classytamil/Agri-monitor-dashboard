# -*- coding: utf-8 -*-
"""agri_water_dataset

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Xj8gLcHJGyZXGvzERF8d-XnEBwQeL4f7
"""

!pip install pandas

import pandas as pd
df=pd.read_csv('/content/agri_water_dataset.csv')
df.head()

print(df.shape)
print(df.columns)

print(df.info())

print(df.describe())

"""# **Model Training**"""

# Import libraries
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import classification_report, confusion_matrix, roc_auc_score

# Load your dataset
df = pd.read_csv("/content/agri_water_dataset.csv")

# Drop timestamp column
df = df.drop(columns=['timestamp'])

# Separate features and target
X = df.drop(columns=['anomaly_flag'])
y = df['anomaly_flag']

# Split data into train and test sets
X_train, X_test, y_train, y_test = train_test_split(
    X, y, test_size=0.2, random_state=42, stratify=y
)

# Initialize Random Forest with class_weight to handle imbalance
rf = RandomForestClassifier(
    n_estimators=200,
    max_depth=10,
    random_state=42,
    class_weight='balanced'
)

# Train the model
rf.fit(X_train, y_train)

# Make predictions
y_pred = rf.predict(X_test)
y_proba = rf.predict_proba(X_test)[:,1]  # probability for ROC-AUC

"""# **Model Evaluation**"""

# Evaluate the model
print("Confusion Matrix:\n", confusion_matrix(y_test, y_pred))
print("\nClassification Report:\n", classification_report(y_test, y_pred))
print("ROC-AUC Score:", roc_auc_score(y_test, y_proba))

"""# **download the model**"""

!pip install joblib

import joblib
model=joblib.dump(rf,'agri_water_model.pkl')
print("model saved ok")

"""# **MQTT Publisher Code**"""

!pip install paho-mqtt

import paho.mqtt.client as mqtt
import json
import random
import time

# MQTT broker details
BROKER = "broker.hivemq.com"  # public broker for testing
PORT = 1883
TOPIC = "agri/sensor_data"
QOS = 1  # Quality of Service: 0,1,2

# Function to generate dummy sensor data
def generate_dummy_data():
    data = {
        "temperature_C": round(random.uniform(10, 45), 2),
        "humidity_percent": round(random.uniform(20, 100), 2),
        "pressure_hPa": round(random.uniform(970, 1035), 2),
        "soil_moisture_percent": round(random.uniform(0, 100), 2)
    }
    return data

# Create MQTT client
client = mqtt.Client()

try:
    # Connect to broker
    client.connect(BROKER, PORT, keepalive=60)
    print("Connected to MQTT broker")

    # Infinite loop to send data continuously
    while True:
        sensor_data = generate_dummy_data()
        payload = json.dumps(sensor_data)
        client.publish(TOPIC, payload, qos=QOS)
        print(f"Published: {payload}")
        time.sleep(2)  # interval between messages

except KeyboardInterrupt:
    print("Publisher stopped by user")

except Exception as e:
    print("Error:", e)

finally:
    client.disconnect()
    print("Disconnected from MQTT broker")